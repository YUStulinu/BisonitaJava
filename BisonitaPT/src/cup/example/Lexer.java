/* The following code was generated by JFlex 1.3.5 on 11/28/23, 2:23 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/28/23, 2:23 PM from the specification file
 * <tt>file:/C:/FACULTATE/Bisonita/BisonitaPT/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\3\1\37"+
    "\2\0\1\7\3\0\1\50\1\51\1\6\1\46\1\45\1\47\1\0"+
    "\1\5\12\4\1\34\1\44\1\40\1\35\1\41\2\0\32\7\1\52"+
    "\1\36\1\53\1\0\1\7\1\0\1\15\1\7\1\24\1\21\1\17"+
    "\1\22\1\14\1\27\1\26\2\7\1\30\1\16\1\20\1\13\1\11"+
    "\1\7\1\12\1\31\1\25\1\23\1\33\1\32\3\7\1\42\1\0"+
    "\1\43\1\0\41\10\2\0\4\7\4\0\1\7\2\0\1\10\7\0"+
    "\1\7\4\0\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0"+
    "\14\7\16\0\5\7\7\0\1\7\1\0\1\7\21\0\160\10\5\7"+
    "\1\0\2\7\2\0\4\7\1\0\1\7\6\0\1\7\1\0\3\7"+
    "\1\0\1\7\1\0\24\7\1\0\123\7\1\0\213\7\1\0\5\10"+
    "\2\0\246\7\1\0\46\7\2\0\1\7\6\0\51\7\6\0\1\7"+
    "\1\0\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10"+
    "\10\0\33\7\4\0\4\7\15\0\6\10\5\0\1\7\4\0\13\10"+
    "\1\0\1\10\3\0\53\7\37\10\4\0\2\7\1\10\143\7\1\0"+
    "\1\7\10\10\1\0\6\10\2\7\2\10\1\0\4\10\2\7\12\10"+
    "\3\7\2\0\1\7\17\0\1\10\1\7\1\10\36\7\33\10\2\0"+
    "\131\7\13\10\1\7\16\0\12\10\41\7\11\10\2\7\4\0\1\7"+
    "\2\0\1\10\30\7\4\10\1\7\11\10\1\7\3\10\1\7\5\10"+
    "\22\0\31\7\3\10\4\0\13\7\5\0\30\7\1\0\6\7\1\0"+
    "\2\10\6\0\10\10\52\7\72\10\66\7\3\10\1\7\22\10\1\7"+
    "\7\10\12\7\2\10\2\0\12\10\1\0\20\7\3\10\1\0\10\7"+
    "\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7"+
    "\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10\1\7\10\0"+
    "\1\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10\4\7\7\0"+
    "\2\7\1\0\1\10\2\0\3\10\1\0\6\7\4\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0"+
    "\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0"+
    "\4\7\1\0\1\7\7\0\14\10\3\7\1\10\13\0\3\10\1\0"+
    "\11\7\1\0\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0"+
    "\5\7\2\0\1\10\1\7\10\10\1\0\3\10\1\0\3\10\2\0"+
    "\1\7\17\0\2\7\2\10\2\0\12\10\1\0\1\7\7\0\1\7"+
    "\6\10\1\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7\7\10\2\0"+
    "\2\10\2\0\3\10\7\0\3\10\4\0\2\7\1\0\3\7\2\10"+
    "\2\0\12\10\1\0\1\7\20\0\1\10\1\7\1\0\6\7\3\0"+
    "\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\3\0\3\7\3\0\14\7\4\0\5\10\3\0\3\10\1\0"+
    "\4\10\2\0\1\7\6\0\1\10\16\0\12\10\11\0\1\7\6\0"+
    "\5\10\10\7\1\0\3\7\1\0\27\7\1\0\20\7\2\0\1\10"+
    "\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\1\0\3\7"+
    "\2\0\1\7\2\0\2\7\2\10\2\0\12\10\20\0\1\7\3\10"+
    "\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7"+
    "\2\0\1\10\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10"+
    "\6\0\2\7\1\0\2\7\2\10\2\0\12\10\1\0\2\7\1\10"+
    "\14\0\4\10\11\7\1\0\3\7\1\0\51\7\2\10\1\7\7\10"+
    "\1\0\3\10\1\0\4\10\1\7\5\0\3\7\1\10\7\0\3\7"+
    "\2\10\2\0\12\10\12\0\6\7\1\0\3\10\1\0\22\7\3\0"+
    "\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0\1\10\4\0"+
    "\6\10\1\0\1\10\1\0\10\10\6\0\12\10\2\0\2\10\15\0"+
    "\60\7\1\10\2\7\7\10\4\0\10\7\10\10\1\0\12\10\47\0"+
    "\2\7\1\0\1\7\1\0\5\7\1\0\30\7\1\0\1\7\1\0"+
    "\12\7\1\10\2\7\11\10\1\7\2\0\5\7\1\0\1\7\1\0"+
    "\7\10\1\0\12\10\2\0\4\7\40\0\1\7\27\0\2\10\6\0"+
    "\12\10\13\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\7"+
    "\1\0\44\7\4\0\24\10\1\0\2\10\5\7\13\10\1\0\44\10"+
    "\11\0\1\10\71\0\53\7\24\10\1\7\12\10\6\0\6\7\4\10"+
    "\4\7\3\10\1\7\3\10\2\7\7\10\3\7\4\10\15\7\14\10"+
    "\1\7\17\10\2\0\46\7\1\0\1\7\5\0\1\7\2\0\53\7"+
    "\1\0\u014d\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7"+
    "\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7\2\0\7\7"+
    "\1\0\1\7\1\0\4\7\2\0\17\7\1\0\71\7\1\0\4\7"+
    "\2\0\103\7\2\0\3\10\40\0\20\7\20\0\126\7\2\0\6\7"+
    "\3\0\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7\3\0\13\7"+
    "\7\0\22\7\4\10\11\0\23\7\3\10\13\0\22\7\2\10\14\0"+
    "\15\7\1\0\3\7\1\0\2\10\14\0\64\7\40\10\3\0\1\7"+
    "\3\0\2\7\1\10\2\0\12\10\41\0\17\10\6\0\131\7\7\0"+
    "\5\7\2\10\42\7\1\10\1\7\5\0\106\7\12\0\37\7\1\0"+
    "\14\10\4\0\14\10\12\0\12\10\36\7\2\0\5\7\13\0\54\7"+
    "\4\0\32\7\6\0\12\10\46\0\27\7\5\10\4\0\65\7\12\10"+
    "\1\0\35\10\2\0\13\10\6\0\12\10\15\0\1\7\10\0\16\10"+
    "\1\0\20\10\61\0\5\10\57\7\21\10\10\7\3\0\12\10\21\0"+
    "\11\10\14\0\3\10\36\7\15\10\2\7\12\10\54\7\16\10\14\0"+
    "\44\7\24\10\10\0\12\10\3\0\3\7\12\10\44\7\2\0\11\7"+
    "\7\0\53\7\2\0\3\7\20\0\3\10\1\0\25\10\4\7\1\10"+
    "\6\7\1\10\2\7\3\10\1\7\5\0\300\7\100\10\u0116\7\2\0"+
    "\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0"+
    "\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0"+
    "\15\7\5\0\3\7\1\0\7\7\16\0\5\10\32\0\5\10\20\0"+
    "\2\7\23\0\1\7\13\0\5\10\1\0\12\10\1\0\1\7\15\0"+
    "\1\7\20\0\15\7\3\0\41\7\17\0\15\10\4\0\1\10\3\0"+
    "\14\10\21\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0"+
    "\5\7\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0"+
    "\13\7\2\0\4\7\5\0\5\7\4\0\1\7\21\0\51\7\u0a77\0"+
    "\345\7\6\0\4\7\3\10\2\7\14\0\46\7\1\0\1\7\5\0"+
    "\1\7\2\0\70\7\7\0\1\7\17\0\1\10\27\7\11\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7"+
    "\31\0\11\7\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0"+
    "\2\10\2\0\3\7\1\0\132\7\1\0\4\7\5\0\53\7\1\0"+
    "\136\7\21\0\40\7\60\0\20\7\u0200\0\u19c0\7\100\0\u568d\7\103\0"+
    "\56\7\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7\1\10"+
    "\4\0\12\10\1\0\37\7\2\10\120\7\2\10\45\0\11\7\2\0"+
    "\147\7\2\0\100\7\5\0\2\7\1\0\1\7\1\0\5\7\30\0"+
    "\20\7\1\10\3\7\1\10\4\7\1\10\27\7\5\10\4\0\1\10"+
    "\13\0\1\7\7\0\64\7\14\0\2\10\62\7\22\10\12\0\12\10"+
    "\6\0\22\10\6\7\3\0\1\7\1\0\2\7\13\10\34\7\10\10"+
    "\2\0\27\7\15\10\14\0\35\7\3\0\4\10\57\7\16\10\16\0"+
    "\1\7\12\10\6\0\5\7\1\10\12\7\12\10\5\7\1\0\51\7"+
    "\16\10\11\0\3\7\1\10\10\7\2\10\2\0\12\10\6\0\27\7"+
    "\3\0\1\7\3\10\62\7\1\10\1\7\3\10\2\7\2\10\5\7"+
    "\2\10\1\7\1\10\1\7\30\0\3\7\2\0\13\7\5\10\2\0"+
    "\3\7\2\10\12\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7"+
    "\1\0\7\7\1\0\53\7\1\0\16\7\6\0\163\7\10\10\1\0"+
    "\2\10\2\0\12\10\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0"+
    "\u016e\7\2\0\152\7\46\0\7\7\14\0\5\7\5\0\1\7\1\10"+
    "\12\7\1\0\15\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0"+
    "\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0"+
    "\15\7\3\0\20\10\20\0\20\10\3\0\2\7\30\0\3\7\31\0"+
    "\1\7\6\0\5\7\1\0\207\7\2\0\1\10\4\0\1\7\13\0"+
    "\12\10\7\0\32\7\4\0\1\7\1\0\32\7\13\0\131\7\3\0"+
    "\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\2\7\3\0"+
    "\2\7\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    44,    88,   132,    88,   176,    88,    88,   220,   264, 
      308,   352,   396,   440,   484,   528,   572,   616,   660,   704, 
      748,   792,   836,   880,   924,    88,   968,  1012,  1056,  1100, 
       88,    88,    88,    88,    88,    88,    88,    88,    88,    88, 
     1144,  1188,   220,  1232,  1276,  1320,  1364,  1408,  1452,   220, 
     1496,  1540,  1584,  1628,   220,  1672,  1716,   220,  1760,  1804, 
     1848,  1892,  1936,    88,    88,    88,    88,    88,  1980,  2024, 
     2068,   220,   220,  2112,  2156,  2200,   220,  2244,   220,  2288, 
     2332,  2376,  2420,  2464,  2508,   220,  2552,  2596,  2640,  2684, 
      220,  2728,   220,  2772,  2816,  2860,  2904,   220,   220,  2948, 
     2992,  3036,   220,  3080,   220,  3124,  3168,  3212,  3256,  3300, 
     3344,   220,  3388,  3432,   220,  3476,   220,   220,  3520,  3564, 
      220,   220,  3608,   220,  3652,   220,  3696,  3740,  3784,   220, 
      220,  3828,  3872,  3916,   220,  3960,  4004,   220,  4048,  4092, 
      220,  4136,   220
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\11\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\11\1\23\1\24\1\25\1\11\1\26"+
    "\1\27\1\30\1\11\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\54\3\56\0\1\5\55\0\1\6"+
    "\53\0\1\11\2\0\25\11\24\0\1\11\2\0\3\11"+
    "\1\51\21\11\24\0\1\11\2\0\10\11\1\52\14\11"+
    "\24\0\1\11\2\0\3\11\1\53\21\11\24\0\1\11"+
    "\2\0\11\11\1\54\13\11\24\0\1\11\2\0\4\11"+
    "\1\55\20\11\24\0\1\11\2\0\11\11\1\56\7\11"+
    "\1\57\3\11\24\0\1\11\2\0\4\11\1\60\20\11"+
    "\24\0\1\11\2\0\3\11\1\61\1\62\20\11\24\0"+
    "\1\11\2\0\4\11\1\63\7\11\1\64\10\11\24\0"+
    "\1\11\2\0\4\11\1\65\14\11\1\66\3\11\24\0"+
    "\1\11\2\0\4\11\1\67\13\11\1\70\4\11\24\0"+
    "\1\11\2\0\11\11\1\71\1\11\1\72\11\11\24\0"+
    "\1\11\2\0\17\11\1\73\5\11\24\0\1\11\2\0"+
    "\10\11\1\74\5\11\1\75\6\11\24\0\1\11\2\0"+
    "\3\11\1\76\14\11\1\77\4\11\55\0\1\100\24\0"+
    "\1\101\102\0\1\102\53\0\1\103\53\0\1\104\22\0"+
    "\1\11\2\0\4\11\1\105\20\11\24\0\1\11\2\0"+
    "\6\11\1\106\7\11\1\107\6\11\24\0\1\11\2\0"+
    "\12\11\1\110\12\11\24\0\1\11\2\0\12\11\1\111"+
    "\11\11\1\112\24\0\1\11\2\0\12\11\1\113\12\11"+
    "\24\0\1\11\2\0\22\11\1\114\2\11\24\0\1\11"+
    "\2\0\16\11\1\115\6\11\24\0\1\11\2\0\6\11"+
    "\1\116\16\11\24\0\1\11\2\0\3\11\1\117\21\11"+
    "\24\0\1\11\2\0\11\11\1\120\13\11\24\0\1\11"+
    "\2\0\21\11\1\121\3\11\24\0\1\11\2\0\10\11"+
    "\1\122\14\11\24\0\1\11\2\0\10\11\1\123\14\11"+
    "\24\0\1\11\2\0\16\11\1\124\6\11\24\0\1\11"+
    "\2\0\11\11\1\125\13\11\24\0\1\11\2\0\16\11"+
    "\1\126\6\11\24\0\1\11\2\0\3\11\1\127\21\11"+
    "\24\0\1\11\2\0\17\11\1\130\5\11\24\0\1\11"+
    "\2\0\17\11\1\131\5\11\24\0\1\11\2\0\5\11"+
    "\1\132\17\11\24\0\1\11\2\0\21\11\1\133\3\11"+
    "\24\0\1\11\2\0\14\11\1\134\10\11\24\0\1\11"+
    "\2\0\10\11\1\135\14\11\24\0\1\11\2\0\2\11"+
    "\1\136\7\11\1\137\1\140\3\11\1\141\5\11\24\0"+
    "\1\11\2\0\10\11\1\142\14\11\24\0\1\11\2\0"+
    "\23\11\1\143\1\11\24\0\1\11\2\0\15\11\1\144"+
    "\7\11\24\0\1\11\2\0\4\11\1\145\20\11\24\0"+
    "\1\11\2\0\6\11\1\146\16\11\24\0\1\11\2\0"+
    "\11\11\1\147\13\11\24\0\1\11\2\0\10\11\1\150"+
    "\14\11\24\0\1\11\2\0\10\11\1\151\14\11\24\0"+
    "\1\11\2\0\17\11\1\152\5\11\24\0\1\11\2\0"+
    "\16\11\1\153\6\11\24\0\1\11\2\0\21\11\1\154"+
    "\3\11\24\0\1\11\2\0\3\11\1\155\21\11\24\0"+
    "\1\11\2\0\3\11\1\156\21\11\24\0\1\11\2\0"+
    "\3\11\1\157\21\11\24\0\1\11\2\0\4\11\1\160"+
    "\20\11\24\0\1\11\2\0\4\11\1\161\7\11\1\162"+
    "\10\11\24\0\1\11\2\0\13\11\1\163\11\11\24\0"+
    "\1\11\2\0\16\11\1\164\6\11\24\0\1\11\2\0"+
    "\3\11\1\165\21\11\24\0\1\11\2\0\3\11\1\166"+
    "\21\11\24\0\1\11\2\0\5\11\1\167\17\11\24\0"+
    "\1\11\2\0\11\11\1\170\13\11\24\0\1\11\2\0"+
    "\10\11\1\171\14\11\24\0\1\11\2\0\10\11\1\172"+
    "\14\11\24\0\1\11\2\0\6\11\1\173\16\11\24\0"+
    "\1\11\2\0\11\11\1\174\13\11\24\0\1\11\2\0"+
    "\4\11\1\175\20\11\24\0\1\11\2\0\3\11\1\176"+
    "\21\11\24\0\1\11\2\0\11\11\1\177\13\11\24\0"+
    "\1\11\2\0\17\11\1\200\5\11\24\0\1\11\2\0"+
    "\10\11\1\201\14\11\24\0\1\11\2\0\5\11\1\202"+
    "\17\11\24\0\1\11\2\0\7\11\1\203\15\11\24\0"+
    "\1\11\2\0\5\11\1\204\17\11\24\0\1\11\2\0"+
    "\15\11\1\205\7\11\24\0\1\11\2\0\4\11\1\206"+
    "\20\11\24\0\1\11\2\0\3\11\1\207\21\11\24\0"+
    "\1\11\2\0\3\11\1\210\21\11\24\0\1\11\2\0"+
    "\16\11\1\211\6\11\24\0\1\11\2\0\11\11\1\212"+
    "\13\11\24\0\1\11\2\0\6\11\1\213\16\11\24\0"+
    "\1\11\2\0\17\11\1\214\5\11\24\0\1\11\2\0"+
    "\7\11\1\215\15\11\24\0\1\11\2\0\4\11\1\216"+
    "\20\11\24\0\1\11\2\0\11\11\1\217\13\11\20\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  9,  9, 
     9,  9,  9,  9,  9,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     9,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[4180];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2268) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 42: 
          {  return symbolFactory.newSymbol("OR", OR);  }
        case 144: break;
        case 49: 
          {  return symbolFactory.newSymbol("DO", DO);  }
        case 145: break;
        case 54: 
          {  return symbolFactory.newSymbol("TO", TO);  }
        case 146: break;
        case 57: 
          {  return symbolFactory.newSymbol("IF", IF);  }
        case 147: break;
        case 29: 
          {  return symbolFactory.newSymbol("GREATER_THAN", GREATER_THAN);  }
        case 148: break;
        case 5: 
          {  return symbolFactory.newSymbol("NUMBER", NUMBER, Integer.parseInt(yytext()));  }
        case 149: break;
        case 3: 
        case 4: 
          {                                }
        case 150: break;
        case 130: 
          {  return symbolFactory.newSymbol("PROGRAM", PROGRAM);  }
        case 151: break;
        case 31: 
          {  return symbolFactory.newSymbol("RLPAREN", RLPAREN);  }
        case 152: break;
        case 30: 
          {  return symbolFactory.newSymbol("CLPAREN", CLPAREN);  }
        case 153: break;
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 40: 
        case 41: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 55: 
        case 56: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 68: 
        case 69: 
        case 70: 
        case 73: 
        case 74: 
        case 75: 
        case 77: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 91: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 99: 
        case 100: 
        case 101: 
        case 103: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 112: 
        case 113: 
        case 115: 
        case 118: 
        case 119: 
        case 122: 
        case 124: 
        case 126: 
        case 127: 
        case 128: 
        case 131: 
        case 132: 
        case 133: 
        case 135: 
        case 136: 
        case 138: 
        case 139: 
        case 141: 
          {  return symbolFactory.newSymbol("ID", ID, yytext());  }
        case 154: break;
        case 121: 
          {  return symbolFactory.newSymbol("WHILE", WHILE);  }
        case 155: break;
        case 120: 
          {  return symbolFactory.newSymbol("WRITE", WRITE);  }
        case 156: break;
        case 117: 
          {  return symbolFactory.newSymbol("CLEAR", CLEAR);  }
        case 157: break;
        case 116: 
          {  return symbolFactory.newSymbol("COLOR", COLOR);  }
        case 158: break;
        case 114: 
          {  return symbolFactory.newSymbol("ENDIF", ENDIF);  }
        case 159: break;
        case 111: 
          {  return symbolFactory.newSymbol("ENDDO", ENDDO);  }
        case 160: break;
        case 35: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 161: break;
        case 33: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 162: break;
        case 7: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 163: break;
        case 25: 
          {  return symbolFactory.newSymbol("EQUAL", EQUAL);  }
        case 164: break;
        case 2: 
        case 24: 
        case 26: 
        case 27: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 165: break;
        case 140: 
          {  return symbolFactory.newSymbol("ENDPROGRAM", ENDPROGRAM);  }
        case 166: break;
        case 134: 
          {  return symbolFactory.newSymbol("INT", INT);  }
        case 167: break;
        case 71: 
          {  return symbolFactory.newSymbol("AND", AND);  }
        case 168: break;
        case 72: 
          {  return symbolFactory.newSymbol("MOD", MOD);  }
        case 169: break;
        case 76: 
          {  return symbolFactory.newSymbol("NOT", NOT);  }
        case 170: break;
        case 78: 
          {  return symbolFactory.newSymbol("FOR", FOR);  }
        case 171: break;
        case 85: 
          {  return symbolFactory.newSymbol("SET", SET);  }
        case 172: break;
        case 137: 
          {  return symbolFactory.newSymbol("FUNCTION", FUNCTION);  }
        case 173: break;
        case 64: 
          {  return symbolFactory.newSymbol("EXPONENT", EXPONENT);  }
        case 174: break;
        case 142: 
          {  return symbolFactory.newSymbol("ENDFUNCTION", ENDFUNCTION);  }
        case 175: break;
        case 104: 
          {  return symbolFactory.newSymbol("LINE", LINE);  }
        case 176: break;
        case 102: 
          {  return symbolFactory.newSymbol("THEN", THEN);  }
        case 177: break;
        case 98: 
          {  return symbolFactory.newSymbol("DRAW", DRAW);  }
        case 178: break;
        case 97: 
          {  return symbolFactory.newSymbol("ELSE", ELSE);  }
        case 179: break;
        case 34: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 180: break;
        case 32: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 181: break;
        case 90: 
          {  return symbolFactory.newSymbol("REAL", REAL);  }
        case 182: break;
        case 92: 
          {  return symbolFactory.newSymbol("MOVE", MOVE);  }
        case 183: break;
        case 28: 
          {  return symbolFactory.newSymbol("LESS_THAN", LESS_THAN);  }
        case 184: break;
        case 38: 
          {  return symbolFactory.newSymbol("BIGLPAREN", BIGLPAREN);  }
        case 185: break;
        case 39: 
          {  return symbolFactory.newSymbol("BIGRPAREN", BIGRPAREN);  }
        case 186: break;
        case 65: 
          {  return symbolFactory.newSymbol("NOT_EQUAL", NOT_EQUAL);  }
        case 187: break;
        case 67: 
          {  return symbolFactory.newSymbol("GREATER_THAN_EQUAL", GREATER_THAN_EQUAL);  }
        case 188: break;
        case 129: 
          {  return symbolFactory.newSymbol("STRING", STRING);  }
        case 189: break;
        case 125: 
          {  return symbolFactory.newSymbol("ENDFOR", ENDFOR);  }
        case 190: break;
        case 123: 
          {  return symbolFactory.newSymbol("RETURN", RETURN);  }
        case 191: break;
        case 37: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 192: break;
        case 36: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 193: break;
        case 6: 
          {  return symbolFactory.newSymbol("DIVIDE", DIVIDE);  }
        case 194: break;
        case 63: 
          {  return symbolFactory.newSymbol("ASSIGN", ASSIGN);  }
        case 195: break;
        case 66: 
          {  return symbolFactory.newSymbol("LESS_THAN_EQUAL", LESS_THAN_EQUAL);  }
        case 196: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
