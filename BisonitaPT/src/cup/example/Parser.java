
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.HashMap;
import java.util.Map;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\011\000\002\002\004\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\014\003" +
    "\000\002\014\005\000\002\010\010\000\002\007\005\000" +
    "\002\007\010\000\002\006\005\000\002\005\003\000\002" +
    "\005\004\000\002\016\003\000\002\016\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\003\000\002\013\004" +
    "\000\002\013\006\000\002\017\004\000\002\020\002\000" +
    "\002\020\004\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\022" +
    "\004\000\002\022\003\000\002\023\007\000\002\023\011" +
    "\000\002\024\007\000\002\025\004\000\002\025\004\000" +
    "\002\026\005\000\002\026\003\000\002\027\003\000\002" +
    "\027\006\000\002\030\005\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\005\000" +
    "\002\032\003\000\002\033\003\000\002\033\003\000\002" +
    "\034\005\000\002\034\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\005\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\037\006\000\002\040\003\000" +
    "\002\040\002\000\002\041\005\000\002\041\003\000\002" +
    "\003\005\000\002\003\004\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\005" +
    "\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\034\005\001\002\000\004\002\131\001" +
    "\002\000\004\067\006\001\002\000\004\004\007\001\002" +
    "\000\010\053\010\054\015\055\011\001\002\000\004\067" +
    "\uffff\001\002\000\004\067\ufffd\001\002\000\032\004\uffec" +
    "\011\uffec\013\uffec\035\uffec\040\uffec\044\uffec\052\uffec\053" +
    "\010\054\015\055\011\066\uffec\067\uffec\001\002\000\004" +
    "\067\016\001\002\000\032\004\ufff6\011\ufff6\013\ufff6\035" +
    "\ufff6\040\ufff6\044\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\066\ufff6\067\ufff6\001\002\000\004\067\ufffe\001\002\000" +
    "\006\004\ufff4\065\ufff4\001\002\000\006\004\021\065\020" +
    "\001\002\000\004\067\022\001\002\000\032\004\ufff7\011" +
    "\ufff7\013\ufff7\035\ufff7\040\ufff7\044\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\055\ufff7\066\ufff7\067\ufff7\001\002\000\006\004" +
    "\ufff3\065\ufff3\001\002\000\024\004\027\011\033\013\042" +
    "\035\043\040\032\044\026\052\030\066\037\067\034\001" +
    "\002\000\032\004\ufff5\011\ufff5\013\ufff5\035\ufff5\040\ufff5" +
    "\044\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\066\ufff5\067" +
    "\ufff5\001\002\000\024\004\uffeb\011\uffeb\013\uffeb\035\uffeb" +
    "\040\uffeb\044\uffeb\052\uffeb\066\uffeb\067\uffeb\001\002\000" +
    "\004\011\125\001\002\000\026\004\uffe4\011\uffe4\013\uffe4" +
    "\035\uffe4\040\uffe4\042\uffe4\044\uffe4\052\uffe4\066\uffe4\067" +
    "\uffe4\001\002\000\022\004\124\011\033\013\042\040\032" +
    "\044\026\052\030\066\037\067\034\001\002\000\026\004" +
    "\uffe9\011\uffe9\013\uffe9\035\uffe9\040\uffe9\042\uffe9\044\uffe9" +
    "\052\uffe9\066\uffe9\067\uffe9\001\002\000\004\011\115\001" +
    "\002\000\010\011\033\066\037\067\034\001\002\000\042" +
    "\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\102\012\uffdc\015" +
    "\101\016\uffdc\020\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\065\uffdc\001\002\000\026\004\uffe6\011" +
    "\uffe6\013\uffe6\035\uffe6\040\uffe6\042\uffe6\044\uffe6\052\uffe6" +
    "\066\uffe6\067\uffe6\001\002\000\004\004\100\001\002\000" +
    "\036\004\uffc7\005\uffc7\006\uffc7\010\uffc7\012\uffc7\016\uffc7" +
    "\020\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\065\uffc7\001\002\000\036\004\uffcd\005\uffcd\006\uffcd" +
    "\010\uffcd\012\uffcd\016\uffcd\020\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\065\uffcd\001\002\000\032" +
    "\004\uffd9\005\070\006\064\012\uffd9\016\uffd9\026\066\027" +
    "\071\030\067\031\075\032\065\033\074\065\uffd9\001\002" +
    "\000\004\014\063\001\002\000\004\004\062\001\002\000" +
    "\036\004\uffd1\005\uffd1\006\uffd1\010\057\012\uffd1\016\uffd1" +
    "\020\056\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\065\uffd1\001\002\000\012\004\uffdd\012\uffdd\016\uffdd" +
    "\065\uffdd\001\002\000\026\004\uffea\011\uffea\013\uffea\035" +
    "\uffea\040\uffea\042\uffea\044\uffea\052\uffea\066\uffea\067\uffea" +
    "\001\002\000\026\004\uffe8\011\uffe8\013\uffe8\035\uffe8\040" +
    "\uffe8\042\uffe8\044\uffe8\052\uffe8\066\uffe8\067\uffe8\001\002" +
    "\000\026\004\uffe7\011\uffe7\013\uffe7\035\uffe7\040\uffe7\042" +
    "\uffe7\044\uffe7\052\uffe7\066\uffe7\067\uffe7\001\002\000\036" +
    "\004\uffc8\005\uffc8\006\uffc8\010\uffc8\012\uffc8\016\uffc8\020" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\065\uffc8\001\002\000\036\004\uffc9\005\uffc9\006\uffc9\010" +
    "\uffc9\012\uffc9\016\uffc9\020\uffc9\026\053\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\065\uffc9\001\002\000\010\011" +
    "\033\066\037\067\034\001\002\000\012\004\uffde\012\uffde" +
    "\016\uffde\065\uffde\001\002\000\010\011\033\066\037\067" +
    "\034\001\002\000\010\011\uffcb\066\uffcb\067\uffcb\001\002" +
    "\000\010\011\uffcc\066\uffcc\067\uffcc\001\002\000\036\004" +
    "\uffc9\005\uffc9\006\uffc9\010\uffc9\012\uffc9\016\uffc9\020\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\065" +
    "\uffc9\001\002\000\036\004\uffce\005\uffce\006\uffce\010\uffce" +
    "\012\uffce\016\uffce\020\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\065\uffce\001\002\000\004\002\001" +
    "\001\002\000\026\004\uffed\011\uffed\013\uffed\035\uffed\040" +
    "\uffed\042\uffed\044\uffed\052\uffed\066\uffed\067\uffed\001\002" +
    "\000\010\011\uffcf\066\uffcf\067\uffcf\001\002\000\010\011" +
    "\uffd8\066\uffd8\067\uffd8\001\002\000\010\011\uffd4\066\uffd4" +
    "\067\uffd4\001\002\000\010\011\uffd7\066\uffd7\067\uffd7\001" +
    "\002\000\010\011\uffd0\066\uffd0\067\uffd0\001\002\000\010" +
    "\011\uffd3\066\uffd3\067\uffd3\001\002\000\010\011\033\066" +
    "\037\067\034\001\002\000\010\011\033\066\037\067\034" +
    "\001\002\000\010\011\uffd5\066\uffd5\067\uffd5\001\002\000" +
    "\010\011\uffd6\066\uffd6\067\uffd6\001\002\000\036\004\uffd2" +
    "\005\uffd2\006\uffd2\010\057\012\uffd2\016\uffd2\020\056\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\065\uffd2" +
    "\001\002\000\016\004\uffda\005\070\006\064\012\uffda\016" +
    "\uffda\065\uffda\001\002\000\026\004\uffe5\011\uffe5\013\uffe5" +
    "\035\uffe5\040\uffe5\042\uffe5\044\uffe5\052\uffe5\066\uffe5\067" +
    "\uffe5\001\002\000\010\011\033\066\037\067\034\001\002" +
    "\000\012\011\033\012\uffc4\066\037\067\034\001\002\000" +
    "\006\012\uffc5\065\107\001\002\000\004\012\106\001\002" +
    "\000\006\012\uffc2\065\uffc2\001\002\000\036\004\uffc6\005" +
    "\uffc6\006\uffc6\010\uffc6\012\uffc6\016\uffc6\020\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\065\uffc6\001" +
    "\002\000\010\011\033\066\037\067\034\001\002\000\006" +
    "\012\uffc3\065\uffc3\001\002\000\004\016\112\001\002\000" +
    "\036\004\uffdb\005\uffdb\006\uffdb\010\uffdb\012\uffdb\016\uffdb" +
    "\020\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\065\uffdb\001\002\000\004\012\114\001\002\000\036" +
    "\004\uffca\005\uffca\006\uffca\010\uffca\012\uffca\016\uffca\020" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\065\uffca\001\002\000\010\011\033\066\037\067\034\001" +
    "\002\000\004\012\117\001\002\000\022\004\027\011\033" +
    "\013\042\040\032\044\026\052\030\066\037\067\034\001" +
    "\002\000\026\004\uffe3\011\uffe3\013\uffe3\035\uffe3\040\uffe3" +
    "\042\121\044\uffe3\052\uffe3\066\uffe3\067\uffe3\001\002\000" +
    "\022\004\027\011\033\013\042\040\032\044\026\052\030" +
    "\066\037\067\034\001\002\000\026\004\uffe2\011\uffe2\013" +
    "\uffe2\035\uffe2\040\uffe2\042\uffe2\044\uffe2\052\uffe2\066\uffe2" +
    "\067\uffe2\001\002\000\026\004\uffdf\011\uffdf\013\uffdf\035" +
    "\uffdf\040\uffdf\042\uffdf\044\uffdf\052\uffdf\066\uffdf\067\uffdf" +
    "\001\002\000\026\004\uffe4\011\uffe4\013\uffe4\035\uffe4\040" +
    "\uffe4\042\uffe4\044\uffe4\052\uffe4\066\uffe4\067\uffe4\001\002" +
    "\000\010\011\033\066\037\067\034\001\002\000\004\012" +
    "\127\001\002\000\022\004\027\011\033\013\042\040\032" +
    "\044\026\052\030\066\037\067\034\001\002\000\026\004" +
    "\uffe1\011\uffe1\013\uffe1\035\uffe1\040\uffe1\042\uffe1\044\uffe1" +
    "\052\uffe1\066\uffe1\067\uffe1\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\011\006\013" +
    "\015\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\023\015\012\020\022\001\001\000\004\016\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\017\030\021\024\022\045\023" +
    "\046\024\047\025\034\026\035\027\051\030\044\032\040" +
    "\034\043\036\037\037\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\017\030\021\122\022\045\023\046\024\047\025\034\026" +
    "\035\027\051\030\044\032\040\034\043\036\037\037\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\026" +
    "\112\027\051\030\044\032\040\034\043\036\037\037\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\071" +
    "\033\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\026\053\027\051\030\044\032\040" +
    "\034\043\036\037\037\050\001\001\000\002\001\001\000" +
    "\010\027\057\036\060\037\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\027\057\032\076\034\043" +
    "\036\037\037\050\001\001\000\012\027\057\034\075\036" +
    "\037\037\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\054\001\001\000\004\033\072\001\001\000" +
    "\002\001\001\000\020\026\110\027\051\030\044\032\040" +
    "\034\043\036\037\037\050\001\001\000\024\026\104\027" +
    "\051\030\044\032\040\034\043\036\037\037\050\040\103" +
    "\041\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\026\107\027\051" +
    "\030\044\032\040\034\043\036\037\037\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\026\115\027\051\030" +
    "\044\032\040\034\043\036\037\037\050\001\001\000\002" +
    "\001\001\000\034\017\030\021\117\022\045\023\046\024" +
    "\047\025\034\026\035\027\051\030\044\032\040\034\043" +
    "\036\037\037\050\001\001\000\002\001\001\000\034\017" +
    "\030\021\121\022\045\023\046\024\047\025\034\026\035" +
    "\027\051\030\044\032\040\034\043\036\037\037\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\026\125\027\051\030\044\032\040\034\043\036" +
    "\037\037\050\001\001\000\002\001\001\000\034\017\030" +
    "\021\127\022\045\023\046\024\047\025\034\026\035\027" +
    "\051\030\044\032\040\034\043\036\037\037\050\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {	
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

  private Lexer lexer;
  private TreeParser parseTree;
  public TreeParser getparseTree() { return parseTree;} 
  private Map<String, SymbolInfo> symbolTable = new HashMap<>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM ID SEMI declaration_list statement_list ENDPROGRAM SEMI 
            {
              TreeParser RESULT =null;
		Location dclrlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dclrlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TreeNode dclrl = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location stlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode stl = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG3
 
    	System.out.println("program"); 
    	parseTree = new TreeParser("program");

    	if (stl != null) {

        parseTree.addChild("declaration_list", dclrl.toString(), "declaration");
        parseTree.addChild("statement_list", stl.toString(), "statement");

        }
    	RESULT = parseTree;

for (TreeNode declaration : dclrl.getChildren()) {
        if (declaration.label.equals("declaration")) {
            TreeNode varList = declaration.getChild("var_list");
            String dataType = declaration.getChild("data_type").label;

            for (TreeNode idNode : varList.getChildren()) {
                String identifier = idNode.label;
                SymbolInfo symbolInfo = new SymbolInfo(dataType);
                symbolTable.put(identifier, symbolInfo);
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TreeParser start_val = (TreeParser)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // data_type ::= STRING 
            {
              TreeNode RESULT =null;
		//@@CUPDBG4
 
    RESULT = new TreeNode("data_type", "STRING", "string");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // data_type ::= INT 
            {
              TreeNode RESULT =null;
		//@@CUPDBG5
 
    RESULT = new TreeNode("data_type", "INT", "integer");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // data_type ::= REAL 
            {
              TreeNode RESULT =null;
		//@@CUPDBG6
 
    RESULT = new TreeNode("data_type", "REAL", "real");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifier_list ::= ID 
            {
              TreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identifier_list ::= identifier_list COMMA ID 
            {
              TreeNode RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode il = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG7
  
                      RESULT = new TreeNode("identifier_list");
                      if (il != null) {
                          RESULT.addChild(il);
                      }
                      RESULT.addChild(new TreeNode("ID", "ID", "identifier"));
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fun_declaration ::= data_type ID LPAREN params RPAREN compound_stmt 
            {
              TreeNode RESULT =null;
		Location dtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TreeNode dt = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location prsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location prsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode prs = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode cst = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
 RESULT = new TreeNode("fun_declaration");
    				   RESULT.addChild(dt);
    				   RESULT.addChild(new TreeNode("ID", "functionName", "function"));
    				   RESULT.addChild(new TreeNode("LPAREN", "LPAREN", "LPAREN"));
    				   RESULT.addChild(prs);
    				   RESULT.addChild(new TreeNode("RPAREN", "RPAREN", "rparen"));
    				   RESULT.addChild(cst);				  

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_declaration ::= data_type ID SEMI 
            {
              TreeNode RESULT =null;
		Location dtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode dt = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG9
 RESULT = new TreeNode("var_declaration");
    				   RESULT.addChild(dt);
    				   RESULT.addChild(new TreeNode("ID", "variableName", "variable"));
    				   RESULT.addChild(new TreeNode("SEMI", "SEMI", "semi"));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_declaration ::= data_type ID BIGLPAREN NUMBER BIGRPAREN SEMI 
            {
              TreeNode RESULT =null;
		Location dtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location dtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TreeNode dt = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		//@@CUPDBG10

    				   RESULT = new TreeNode("var_declaration1");
    				   RESULT.addChild(dt);
    				   RESULT.addChild(new TreeNode("ID", "arrayName", "array"));
    				   RESULT.addChild(new TreeNode("BIGLPAREN", "BIGLPAREN", "biglparen"));	
   					   RESULT.addChild(new TreeNode("NUMBER", "NUMBER", "number"));
    				   RESULT.addChild(new TreeNode("BIGRPAREN", "BIGRPAREN", "bigrparen"));
    				   RESULT.addChild(new TreeNode("SEMI"));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= data_type var_list SEMI 
            {
              TreeNode RESULT =null;
		Location dtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode dt = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location vlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TreeNode vl = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG11

    			 RESULT = new TreeNode("declaration2");
    			 RESULT.addChild(dt);
    			 RESULT.addChild(vl);
    			 RESULT.addChild(new TreeNode("SEMI", "SEMI", "semi"));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration_list ::= declaration 
            {
              TreeNode RESULT =null;
		Location dclrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dclrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode dclr = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12

    				 RESULT = new TreeNode("declaration3");
    				 RESULT.addChild(dclr);
    				 System.out.println("declaration3");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration_list ::= declaration_list declaration 
            {
              TreeNode RESULT =null;
		Location dclrlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dclrlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TreeNode dclrl = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dclrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dclrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode dclr = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13

    				 RESULT = new TreeNode("declaration_list_declaration");
    				 RESULT.addChild(dclrl);
    				 RESULT.addChild(dclr);
    				 System.out.println("declaration_list_declaration");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_list ::= ID 
            {
              TreeNode RESULT =null;
		//@@CUPDBG14

   				 RESULT = new TreeNode("var_list");
    			 RESULT.addChild(new TreeNode("ID", "listName", "list"));
    			 System.out.println("var_list");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_list ::= var_list COMMA ID 
            {
              TreeNode RESULT =null;
		Location vtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode vt = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG15

    			  RESULT = new TreeNode("var_list1");
    			  RESULT.addChild(vt);
    			  RESULT.addChild(new TreeNode("COMMA", "COMMA", "comma"));
    			  RESULT.addChild(new TreeNode("ID", "listName", "list"));
    			  System.out.println("var_list1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // params ::= param_list 
            {
              TreeNode RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode pl = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16

    					  RESULT = new TreeNode("params");
    					  RESULT.addChild(pl);
    					  System.out.println("params");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param_list ::= param_list SEMI param 
            {
              TreeNode RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode pl = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location prmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode prm = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17

    						RESULT = new TreeNode("param_list");
    						RESULT.addChild(pl);
    						RESULT.addChild(new TreeNode("SEMI", "SEMI", "semi"));
    						RESULT.addChild(prm);
    						System.out.println("param_list");
											
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param_list ::= param 
            {
              TreeNode RESULT =null;
		Location prmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location prmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode prm = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18

    						RESULT = new TreeNode("param_list1");
    						RESULT.addChild(prm);
    						System.out.println("param_list1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= data_type ID 
            {
              TreeNode RESULT =null;
		Location dtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TreeNode dt = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG19

    						 RESULT = new TreeNode("param");
    						 RESULT.addChild(dt);
    						 RESULT.addChild(new TreeNode("ID", "paramName", "param"));
    						 System.out.println("param");
						  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= data_type ID BIGLPAREN BIGRPAREN 
            {
              TreeNode RESULT =null;
		Location dtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location dtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		TreeNode dt = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG20

    						RESULT = new TreeNode("param1");
    						RESULT.addChild(dt);
    						RESULT.addChild(new TreeNode("ID", "dataName", "data"));
    						RESULT.addChild(new TreeNode("BIGLPAREN", "BIGLPAREN", "bigLPAREN"));
    						RESULT.addChild(new TreeNode("BIGRPAREN", "BIGRPAREN", "bigrparen"));
    						System.out.println("param1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compound_stmt ::= CLPAREN RLPAREN 
            {
              TreeNode RESULT =null;
		//@@CUPDBG21

    								 RESULT = new TreeNode("compound_stmt");
    							     RESULT.addChild(new TreeNode("CLPAREN", "CLPAREN", "cLPAREN"));
    								 RESULT.addChild(new TreeNode("RLPAREN", "RLPAREN", "rLPAREN"));
    								 System.out.println("compound_stmt");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= 
            {
              TreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement_list ::= statement_list statement 
            {
              TreeNode RESULT =null;
		Location stlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TreeNode stl = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22

    									RESULT = new TreeNode("statement_list_statement");
    										if (stl != null) {
        									   RESULT.addChild(stl);
    										}
    										if (st != null) {
        									   RESULT.addChild(st);
    										}
    										System.out.println("statement_list_statement");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= expression_stmt 
            {
              TreeNode RESULT =null;
		Location estxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location estxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode est = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23

    								RESULT = new TreeNode("expression_stmt");
    								 if (est != null) {
        								RESULT.addChild(est);
    							  }
    								System.out.println("expression_stmt");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= compound_stmt 
            {
              TreeNode RESULT =null;
		Location cstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode cst = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24

    								 RESULT = new TreeNode("compound_stmt");
    								   if (cst != null) {
        								 RESULT.addChild(cst);
    							  }
    								System.out.println("compound_stmt");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= selection_stmt 
            {
              TreeNode RESULT =null;
		Location sstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode sst = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25

    								 RESULT = new TreeNode("selection_stmt");
    								   if (sst != null) {
        								RESULT.addChild(sst);
    							  }
    							   System.out.println("selection_stmt");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= iteration_stmt 
            {
              TreeNode RESULT =null;
		Location istxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location istxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode ist = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26

    								RESULT = new TreeNode("iteration_stmt");
    								   if (ist != null) {
        								RESULT.addChild(ist);
    							  }
    							   System.out.println("iteration_stmt");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= return_stmt 
            {
              TreeNode RESULT =null;
		Location rstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode rst = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27

    								RESULT = new TreeNode("return_stmt");
    								    if (rst != null) {
        								 RESULT.addChild(rst);
    						      }
    							   System.out.println("return_stmt");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_stmt ::= expression SEMI 
            {
              TreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TreeNode ex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG28

    									  RESULT = new TreeNode("expression_stmt1");
    										if (ex != null) {
        									  RESULT.addChild(ex);
    								   }
    									RESULT.addChild(new TreeNode("SEMI", "SEMI", "semi"));
    									System.out.println("expression_stmt1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression_stmt ::= SEMI 
            {
              TreeNode RESULT =null;
		//@@CUPDBG29

    						RESULT = new TreeNode("expression_stmt2");
    						RESULT.addChild(new TreeNode("SEMI", "SEMI", "semi"));
    						System.out.println("expression_stmt2");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // selection_stmt ::= IF LPAREN expression RPAREN statement 
            {
              TreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode ex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30

    									RESULT = new TreeNode("selection_stmt");
    									RESULT.addChild(new TreeNode("IF", "IF", "if"));
    									RESULT.addChild(new TreeNode("LPAREN", "LPAREN", "LPAREN"));
    									RESULT.addChild(ex);
    									RESULT.addChild(new TreeNode("RPAREN", "RPAREN", "rparen"));
    									RESULT.addChild(st);
    									System.out.println("selection_stmt");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // selection_stmt ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              TreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		TreeNode ex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location st_elsexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location st_elsexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode st_else = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31

    					RESULT = new TreeNode("selection_stmt1");
    					RESULT.addChild(new TreeNode("IF", "IF", "if"));
    					RESULT.addChild(new TreeNode("LPAREN", "LPAREN", "LPAREN"));
    					RESULT.addChild(ex);
    					RESULT.addChild(new TreeNode("RPAREN", "RPAREN", "rparen"));
    					RESULT.addChild(st);
    					RESULT.addChild(new TreeNode("ELSE", "ELSE", "else"));
    					RESULT.addChild(st_else);
    					System.out.println("selection_stmt1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iteration_stmt ::= WHILE LPAREN expression RPAREN statement 
            {
              TreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode ex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32

    						RESULT = new TreeNode("iteration_stmt");
    						RESULT.addChild(new TreeNode("WHILE", "WHILE", "while"));
    						RESULT.addChild(new TreeNode("LPAREN", "LPAREN", "LPAREN"));
    						RESULT.addChild(ex);
    						RESULT.addChild(new TreeNode("RPAREN", "RPAREN", "rparen"));
    						RESULT.addChild(st);
    						System.out.println("iteration_stmt");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // return_stmt ::= RETURN SEMI 
            {
              TreeNode RESULT =null;
		//@@CUPDBG33

    							RESULT = new TreeNode("return_stmt");
    							RESULT.addChild(new TreeNode("RETURN", "RETURN", "return"));
    							RESULT.addChild(new TreeNode("SEMI", "SEMI", "semi"));
    							System.out.println("return_stmt");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // return_stmt ::= RETURN statement 
            {
              TreeNode RESULT =null;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode st = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34

    							RESULT = new TreeNode("return_stmt1");
    							RESULT.addChild(new TreeNode("RETURN", "RETURN", "return"));
    							RESULT.addChild(st);
    							System.out.println("return_stmt1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= var EQUAL expression 
            {
              TreeNode RESULT =null;
		Location vrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode vr = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode ex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35

    							RESULT = new TreeNode("expression");
    							RESULT.addChild(vr);
    							RESULT.addChild(new TreeNode("EQUAL", "EQUAL", "equal"));
    							RESULT.addChild(ex);
    							System.out.println("expression");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= simple_expression 
            {
              TreeNode RESULT =null;
		Location sexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode sex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36

    							RESULT = new TreeNode("expression1");
    							RESULT.addChild(sex);
    							System.out.println("expression1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= ID 
            {
              TreeNode RESULT =null;
		//@@CUPDBG37

    			RESULT = new TreeNode("var");
    			RESULT.addChild(new TreeNode("ID", "varName", "var"));
    			System.out.println("var");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var ::= ID BIGLPAREN expression BIGRPAREN 
            {
              TreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TreeNode ex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG38

    					RESULT = new TreeNode("var1");
    					RESULT.addChild(new TreeNode("ID", "expressionName", "expression"));
    					RESULT.addChild(new TreeNode("BIGLPAREN", "BIGLPAREN", "bigLPAREN"));
    					RESULT.addChild(ex);
    					RESULT.addChild(new TreeNode("BIGRPAREN", "BIGRPAREN", "bigrparen"));
    					System.out.println("var1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_expression ::= additive_expression relop additive_expression 
            {
              TreeNode RESULT =null;
		Location aexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location aexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode aex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rlpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rlpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TreeNode rlp = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location aex_rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aex_rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode aex_r = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39

    								RESULT = new TreeNode("simple_expression");
    								RESULT.addChild(aex);
    								RESULT.addChild(rlp);
    								RESULT.addChild(aex_r);
    								System.out.println("simple_expression");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_expression ::= additive_expression 
            {
              TreeNode RESULT =null;
		Location aexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode aex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG40

    							RESULT = new TreeNode("simple_expression1");
    							RESULT.addChild(aex);
    							System.out.println("simple_expression1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relop ::= LESS_THAN_EQUAL 
            {
              TreeNode RESULT =null;
		//@@CUPDBG41

    						 RESULT = new TreeNode("relop");
    						 RESULT.addChild(new TreeNode("LESS_THAN_EQUAL", "LESS_THAN_EQUAL", "less_than_equal" ));
    						 System.out.println("relop");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relop ::= LESS_THAN 
            {
              TreeNode RESULT =null;
		//@@CUPDBG42

    					 RESULT = new TreeNode("relop1");
    					 RESULT.addChild(new TreeNode("LESS_THAN", "LESS_THAN", "less_than"));
    					 System.out.println("relop1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relop ::= GREATER_THAN 
            {
              TreeNode RESULT =null;
		//@@CUPDBG43

    					 RESULT = new TreeNode("relop2");
    					 RESULT.addChild(new TreeNode("GREATER_THAN", "GREATER_THAN", "greater_than"));
    					 System.out.println("relop2");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relop ::= GREATER_THAN_EQUAL 
            {
              TreeNode RESULT =null;
		//@@CUPDBG44

    				     RESULT = new TreeNode("relop3");
    					 RESULT.addChild(new TreeNode("GREATER_THAN_EQUAL", "GREATER_THAN_EQUAL", "greater_than_equal" ));
    					 System.out.println("relop3");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relop ::= EQUAL 
            {
              TreeNode RESULT =null;
		//@@CUPDBG45

    					 RESULT = new TreeNode("relop4");
    					 RESULT.addChild(new TreeNode("EQUAL", "EQUAL", "equal"));
    					 System.out.println("relop4");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relop ::= NOT_EQUAL 
            {
              TreeNode RESULT =null;
		//@@CUPDBG46

    			         RESULT = new TreeNode("relop5");
    					 RESULT.addChild(new TreeNode("NOT_EQUAL", "NOT_EQUAL", "not_equal"));
    				     System.out.println("relop5");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // additive_expression ::= additive_expression addop term 
            {
              TreeNode RESULT =null;
		Location aexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location aexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode aex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location adpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location adpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TreeNode adp = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location tmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode tm = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG47

    									RESULT = new TreeNode("additive_expression");
    									RESULT.addChild(aex);
    									RESULT.addChild(adp);
    									RESULT.addChild(tm);
    									System.out.println("additive_expression");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // additive_expression ::= term 
            {
              TreeNode RESULT =null;
		Location tmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode tm = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG48

    								 RESULT = new TreeNode("additive_expression1");
    								 RESULT.addChild(tm);
    								 System.out.println("additive_expression1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // addop ::= PLUS 
            {
              TreeNode RESULT =null;
		//@@CUPDBG49

    				 RESULT = new TreeNode("addop");
    				 RESULT.addChild(new TreeNode("PLUS", "PLUS", "plus"));
    				 System.out.println("addop");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // addop ::= MINUS 
            {
              TreeNode RESULT =null;
		//@@CUPDBG50

    				 RESULT = new TreeNode("addop1");
    				 RESULT.addChild(new TreeNode("MINUS", "MINUS", "minus"));
    				 System.out.println("addop1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= term mulop factor 
            {
              TreeNode RESULT =null;
		Location tmxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location tmxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode tm = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location mlpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mlpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TreeNode mlp = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location fctxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fctxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode fct = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51

    									 RESULT = new TreeNode("term");
    									 RESULT.addChild(tm);
    									 RESULT.addChild(mlp);
    									 RESULT.addChild(fct);
    								     System.out.println("term");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= factor 
            {
              TreeNode RESULT =null;
		Location fctxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fctxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode fct = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52

    					  RESULT = new TreeNode("term1");
    					  RESULT.addChild(fct);
    					  System.out.println("term1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mulop ::= TIMES 
            {
              TreeNode RESULT =null;
		//@@CUPDBG53

    				   RESULT = new TreeNode("mulop");
    				   RESULT.addChild(new TreeNode("TIMES", "TIMES", "times"));
    				   System.out.println("mulop");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mulop ::= DIVIDE 
            {
              TreeNode RESULT =null;
		//@@CUPDBG54

    				   RESULT = new TreeNode("mulop1");
    				   RESULT.addChild(new TreeNode("DIVIDE", "DIVIDE", "divide"));
   					   System.out.println("mulop1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= LPAREN expression RPAREN 
            {
              TreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TreeNode ex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG55

    										RESULT = new TreeNode("factor");
    										RESULT.addChild(new TreeNode("LPAREN", "LPAREN", "LPAREN"));
    										RESULT.addChild(ex);
    										RESULT.addChild(new TreeNode("RPAREN", "RPAREN", "rparen"));
    										System.out.println("factor");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= var 
            {
              TreeNode RESULT =null;
		Location vrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode vr = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG56

    					RESULT = new TreeNode("factor1");
    					RESULT.addChild(vr);
    					System.out.println("factor1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= call 
            {
              TreeNode RESULT =null;
		Location clxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location clxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode cl = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG57

    					RESULT = new TreeNode("factor2");
    					RESULT.addChild(cl);
    					System.out.println("factor2");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= NUMBER 
            {
              TreeNode RESULT =null;
		//@@CUPDBG58

    					RESULT = new TreeNode("factor3");
    					RESULT.addChild(new TreeNode("NUMBER", "NUMBER", "number"));
    					System.out.println("factor3");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // call ::= ID LPAREN args RPAREN 
            {
              TreeNode RESULT =null;
		Location agsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location agsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		TreeNode ags = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG59

    									RESULT = new TreeNode("call");
    									RESULT.addChild(new TreeNode("ID", "callName", "call"));
    									RESULT.addChild(new TreeNode("LPAREN", "LPAREN", "LPAREN"));
    									RESULT.addChild(ags);
    									RESULT.addChild(new TreeNode("RPAREN", "RPAREN", "rparen"));
    									System.out.println("call");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // args ::= arg_list 
            {
              TreeNode RESULT =null;
		Location aglxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location aglxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode agl = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG60

    						RESULT = new TreeNode("args");
    						RESULT.addChild(agl);
    						System.out.println("args");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // args ::= 
            {
              TreeNode RESULT =null;
		//@@CUPDBG61

   							 RESULT = new TreeNode("args");
    						 System.out.println("args");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arg_list ::= arg_list COMMA expression 
            {
              TreeNode RESULT =null;
		Location aglxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location aglxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TreeNode agl = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode ex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62

    											  RESULT = new TreeNode("arg_list");
    										      RESULT.addChild(agl);
    											  RESULT.addChild(new TreeNode("COMMA", "COMMA", "comma"));
    											  RESULT.addChild(ex);
    											  System.out.println("arg_list");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arg_list ::= expression 
            {
              TreeNode RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TreeNode ex = (TreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG63

    							  RESULT = new TreeNode("arg_list1");
    							  RESULT.addChild(ex);
    							  System.out.println("arg_list1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_list ::= expr_list expr SEMI 
            {
              TreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG64
 System.out.println(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_list ::= expr SEMI 
            {
              TreeNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG65
 System.out.println(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr PLUS expr 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG66
 RESULT = e1+e2;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr MINUS expr 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG67
 RESULT = e1-e2;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr TIMES expr 
            {
              Integer RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG68
 RESULT = e1*e2;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= MINUS expr 
            {
              Integer RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG69
 RESULT = -e;           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= LPAREN expr RPAREN 
            {
              Integer RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG70
 RESULT = e;           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= NUMBER 
            {
              Integer RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG71
 RESULT = n;           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
